apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-scheduler
  labels:
    tier: control-plane
    k8s-app: kube-scheduler
    {{- if eq .Values.replicas 1.0 }}
    pdb: controlplane
    {{- end }}
  annotations:
    # Automatically rolls update when config changes
    checksum/config: {{ include (print $.Template.BasePath "/kube-apiserver-load-balancer-config-map.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      {{- if eq .Values.replicas 1.0 }}
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
  selector:
    matchLabels:
      tier: control-plane
      k8s-app: kube-scheduler
      {{- if eq .Values.replicas 1.0 }}
      pdb: controlplane
      {{- end }}
  template:
    metadata:
      labels:
        tier: control-plane
        k8s-app: kube-scheduler
        {{- if eq .Values.replicas 1.0 }}
        pdb: controlplane
        {{- end }}
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      affinity:
        podAntiAffinity:
          {{- if eq .Values.replicas 1.0 }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: tier
                  operator: In
                  values:
                  - control-plane
                - key: k8s-app
                  operator: In
                  values:
                  - kube-scheduler
              topologyKey: kubernetes.io/hostname
          {{- else }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: tier
                operator: In
                values:
                - control-plane
              - key: k8s-app
                operator: In
                values:
                - kube-scheduler
            topologyKey: kubernetes.io/hostname
          {{- end }}
      #nodeSelector:
      #  node-role.kubernetes.io/master: ""
      priorityClassName: system-cluster-critical
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: kube-scheduler
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: kube-scheduler
        image: k8s.gcr.io/hyperkube:v{{ .Chart.AppVersion }}
        command:
        - ./hyperkube
        - kube-scheduler
        - --config=/etc/kubernetes/kube-scheduler.yaml
        - --authentication-kubeconfig=/etc/kubernetes/kubeconfig
        - --authorization-kubeconfig=/etc/kubernetes/kubeconfig
        - --requestheader-client-ca-file=/etc/kubernetes/pki/requestheader-client-ca-file
        - --client-ca-file=/etc/kubernetes/pki/client-ca-file
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /healthz
            port: 10259
          initialDelaySeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - name: kube-scheduler
          mountPath: /etc/kubernetes
          readOnly: true
        - name: extension-apiserver-authentication
          mountPath: /etc/kubernetes/pki
          readOnly: true
      - name: kube-apiserver-load-balancer
        image: haproxy:2.1.0-alpine
        volumeMounts:
        - name: kube-apiserver-load-balancer
          mountPath: /usr/local/etc/haproxy
          readOnly: true
        ports:
        - name: metrics
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /metrics
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 15
      volumes:
      - name: kube-scheduler
        configMap:
          name: kube-scheduler
      - name: kube-apiserver-load-balancer
        configMap:
          name: kube-apiserver-load-balancer
      - name: extension-apiserver-authentication
        configMap:
          name: extension-apiserver-authentication
